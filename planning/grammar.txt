Nat = 0,1,2,...
Int = -1, -2, .... | Nat
Rational = Int / Int
String = "..."
List = [ <Expr> ... ]
Boolean = true | false

Literal = Nat | Int | Rational | String | List | Boolean

Maybe = nothing | just <Expr>

Id = [<name> : <Type>]

Expr = 
  Literal | Maybe | 
  <Expr> + <Expr> | <Expr> - <Expr> | <Expr> * <Expr> | <Expr> % <Expr> | <Expr> / <Expr> | 
  <Expr> in <Expr> | <Expr> and <Expr> | <Expr> or <Expr> | not <Expr> |
  length <Expr> | car <Expr> | cdr <Expr>

  let <Id> be <Expr> in: <Expr> |
  if <Expr> then <Expr> else <Expr> |

  lambda <id> ... : <Expr> |

  print <Expr> <Expr>

Type =
  Absurd | Rational | Int | Nat | String | Boolean |
  List <Type> | Maybe <Type> | <Id> -> <Type> |
  Universe[Nat] | Equal <Type> <Expr> <Expr> | Exists <Id> : <Type> | Forall <Id> :  <Type>

Definition =
  defunc <name> <Type> : <Expr> |
  defconst <id> : <Expr> |
  defrel <name> 


Phrase = Definition | Expression

File = Phrase ...